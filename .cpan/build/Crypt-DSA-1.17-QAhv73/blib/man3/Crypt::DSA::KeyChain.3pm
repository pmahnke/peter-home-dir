.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Crypt::DSA::KeyChain 3"
.TH Crypt::DSA::KeyChain 3 "2011-06-16" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::DSA::KeyChain \- DSA key generation system
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Crypt::DSA::KeyChain;
\&    my $keychain = Crypt::DSA::KeyChain\->new;
\&
\&    my $key = $keychain\->generate_params(
\&                    Size      => 512,
\&                    Seed      => $seed,
\&                    Verbosity => 1,
\&              );
\&
\&    $keychain\->generate_keys($key);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fICrypt::DSA::KeyChain\fR is a lower-level interface to key
generation than the interface in \fICrypt::DSA\fR (the \fIkeygen\fR
method). It allows you to separately generate the \fIp\fR, \fIq\fR,
and \fIg\fR key parameters, given an optional starting seed, and
a mandatory bit size for \fIp\fR (\fIq\fR and \fIg\fR are 160 bits each).
.PP
You can then call \fIgenerate_keys\fR to generate the public and
private portions of the key.
.SH "USAGE"
.IX Header "USAGE"
.ie n .SS "$keychain = Crypt::DSA::KeyChain\->new"
.el .SS "\f(CW$keychain\fP = Crypt::DSA::KeyChain\->new"
.IX Subsection "$keychain = Crypt::DSA::KeyChain->new"
Constructs a new \fICrypt::DSA::KeyChain\fR object. At the moment
this isn't particularly useful in itself, other than being the
object you need in order to call the other methods.
.PP
Returns the new object.
.ie n .SS "$key = $keychain\->generate_params(%arg)"
.el .SS "\f(CW$key\fP = \f(CW$keychain\fP\->generate_params(%arg)"
.IX Subsection "$key = $keychain->generate_params(%arg)"
Generates a set of \s-1DSA\s0 parameters: the \fIp\fR, \fIq\fR, and \fIg\fR
values of the key. This involves finding primes, and as such
it can be a relatively long process.
.PP
When invoked in scalar context, returns a new
\&\fICrypt::DSA::Key\fR object.
.PP
In list context, returns the new \fICrypt::DSA::Key\fR object,
along with: the value of the internal counter when a suitable
prime \fIp\fR was found; the value of \fIh\fR when \fIg\fR was derived;
and the value of the seed (a 20\-byte string) when \fIq\fR was
found. These values aren't particularly useful in normal
circumstances, but they could be useful.
.PP
\&\fI\f(CI%arg\fI\fR can contain:
.IP "\(bu" 4
Size
.Sp
The size in bits of the \fIp\fR value to generate. The \fIq\fR and
\&\fIg\fR values are always 160 bits each.
.Sp
This argument is mandatory.
.IP "\(bu" 4
Seed
.Sp
A seed with which \fIq\fR generation will begin. If this seed does
not lead to a suitable prime, it will be discarded, and a new
random seed chosen in its place, until a suitable prime can be
found.
.Sp
This is entirely optional, and if not provided a random seed will
be generated automatically.
.IP "\(bu" 4
Verbosity
.Sp
Should be either 0 or 1. A value of 1 will give you a progress
meter during \fIp\fR and \fIq\fR generation\*(--this can be useful, since
the process can be relatively long.
.Sp
The default is 0.
.ie n .SS "$keychain\->generate_keys($key)"
.el .SS "\f(CW$keychain\fP\->generate_keys($key)"
.IX Subsection "$keychain->generate_keys($key)"
Generates the public and private portions of the key \fI\f(CI$key\fI\fR,
a \fICrypt::DSA::Key\fR object.
.SH "AUTHOR & COPYRIGHT"
.IX Header "AUTHOR & COPYRIGHT"
Please see the Crypt::DSA manpage for author, copyright,
and license information.
